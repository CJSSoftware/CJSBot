import HTTP from '../http/HTTP';
import { ClientConfig, ClientOptions } from '../../resources/structs';
import { AESKeysRequestParams, AESKeysResponseData, AllCosmeticsRequestParams, AllCosmeticsResponseData, BannerColorsRequestParams, BannerColorsResponseData, BannersRequestParams, BannersResponseData, BeanCosmeticsListRequestParams, BeanCosmeticsListResponseData, BRCosmeticByIDRequestParams, BRCosmeticByIDResponseData, BRCosmeticSearchRequestParams, BRCosmeticSearchResponseData, BRCosmeticsListRequestParams, BRCosmeticsListResponseData, BRCosmeticsSearchByIDsRequestParams, BRCosmeticsSearchByIDsResponseData, BRCosmeticsSearchRequestParams, BRCosmeticsSearchResponseData, BRMapRequestParams, BRMapResponseData, BRNewsRequestParams, BRNewsResponseData, BRStatsByAccountIDRequestParams, BRStatsByAccountIDResponseData, BRStatsRequestParams, BRStatsResponseData, CarCosmeticsListRequestParams, CarCosmeticsListResponseData, CreativeNewsRequestParams, CreativeNewsResponseData, CreatorCodeRequestParams, CreatorCodeResponseData, InstrumentCosmeticsListRequestParams, InstrumentCosmeticsListResponseData, LegoCosmeticsListRequestParams, LegoCosmeticsListResponseData, LegoKitCosmeticsListRequestParams, LegoKitCosmeticsListResponseData, NewCosmeticsRequestParams, NewCosmeticsResponseData, NewsRequestParams, NewsResponseData, PlaylistByIDRequestParams, PlaylistByIDResponseData, PlaylistsRequestParams, PlaylistsResponseData, ShopRequestParams, ShopResponseData, STWNewsRequestParams, STWNewsResponseData, TrackCosmeticsListRequestParams, TrackCosmeticsListResponseData } from '../http/autogeneratedEndpointStructs';
declare class Client {
    http: HTTP;
    config: ClientConfig;
    constructor(config?: ClientOptions);
    /**
     * Returns the current aes key
     * @param options Options for this endpoint
     */
    aesKeys(options: AESKeysRequestParams): Promise<AESKeysResponseData>;
    /**
     * Returns an array of all banners
     * @param options Options for this endpoint
     */
    banners(options: BannersRequestParams): Promise<BannersResponseData>;
    /**
     * Returns an array of all banner colors
     * @param options Options for this endpoint
     */
    bannerColors(options: BannerColorsRequestParams): Promise<BannerColorsResponseData>;
    /**
     * Returns data of all cosmetics
     * @param options Options for this endpoint
     */
    allCosmetics(options: AllCosmeticsRequestParams): Promise<AllCosmeticsResponseData>;
    /**
     * Returns data of the latest added cosmetics
     * @param options Options for this endpoint
     */
    newCosmetics(options: NewCosmeticsRequestParams): Promise<NewCosmeticsResponseData>;
    /**
     * Returns data of all battle royale cosmetics
     * @param options Options for this endpoint
     */
    brCosmeticsList(options: BRCosmeticsListRequestParams): Promise<BRCosmeticsListResponseData>;
    /**
     * Returns data of all track cosmetics
     * @param options Options for this endpoint
     */
    trackCosmeticsList(options: TrackCosmeticsListRequestParams): Promise<TrackCosmeticsListResponseData>;
    /**
     * Returns data of all instrument cosmetics
     * @param options Options for this endpoint
     */
    instrumentCosmeticsList(options: InstrumentCosmeticsListRequestParams): Promise<InstrumentCosmeticsListResponseData>;
    /**
     * Returns data of all car cosmetics
     * @param options Options for this endpoint
     */
    carCosmeticsList(options: CarCosmeticsListRequestParams): Promise<CarCosmeticsListResponseData>;
    /**
     * Returns data of all lego cosmetics
     * @param options Options for this endpoint
     */
    legoCosmeticsList(options: LegoCosmeticsListRequestParams): Promise<LegoCosmeticsListResponseData>;
    /**
     * Returns data of all lego kit cosmetics
     * @param options Options for this endpoint
     */
    legoKitCosmeticsList(options: LegoKitCosmeticsListRequestParams): Promise<LegoKitCosmeticsListResponseData>;
    /**
     * Returns data of all bean aka fall guys cosmetics
     * @param options Options for this endpoint
     */
    beanCosmeticsList(options: BeanCosmeticsListRequestParams): Promise<BeanCosmeticsListResponseData>;
    /**
     * Returns data of the requested battle royale cosmetic-id
     * @param options Options for this endpoint
     */
    brCosmeticByID(cosmeticId: string, options: BRCosmeticByIDRequestParams): Promise<BRCosmeticByIDResponseData>;
    /**
     * Returns data of the first battle royale cosmetic which matches the search parameter(s)
     * @param options Options for this endpoint
     */
    brCosmeticSearch(options: BRCosmeticSearchRequestParams): Promise<BRCosmeticSearchResponseData>;
    /**
     * Returns an array of all battle royale cosmetics which match the search parameter(s)
     * @param options Options for this endpoint
     */
    brCosmeticsSearch(options: BRCosmeticsSearchRequestParams): Promise<BRCosmeticsSearchResponseData>;
    /**
     * Returns an array of the requested battle royale cosmetic ids
     * @param options Options for this endpoint
     */
    brCosmeticsSearchByIDs(options: BRCosmeticsSearchByIDsRequestParams): Promise<BRCosmeticsSearchByIDsResponseData>;
    /**
     * Returns data of a creator code by its name
     * @param options Options for this endpoint
     */
    creatorCode(options: CreatorCodeRequestParams): Promise<CreatorCodeResponseData>;
    /**
     * Returns data & images of the BR map & POIs
     * @param options Options for this endpoint
     */
    brMap(options: BRMapRequestParams): Promise<BRMapResponseData>;
    /**
     * Returns data of the current battle royale, save the world & creative news
     * @param options Options for this endpoint
     */
    news(options: NewsRequestParams): Promise<NewsResponseData>;
    /**
     * Returns data of the current battle royale news
     * @param options Options for this endpoint
     */
    brNews(options: BRNewsRequestParams): Promise<BRNewsResponseData>;
    /**
     * Returns data of the current save the world news
     * @param options Options for this endpoint
     */
    stwNews(options: STWNewsRequestParams): Promise<STWNewsResponseData>;
    /**
     * Returns data of the current creative news
     * @param options Options for this endpoint
     */
    creativeNews(options: CreativeNewsRequestParams): Promise<CreativeNewsResponseData>;
    /**
     * Returns an array of all playlists
     * @param options Options for this endpoint
     */
    playlists(options: PlaylistsRequestParams): Promise<PlaylistsResponseData>;
    /**
     * Returns data of the requested playlist-id
     * @param options Options for this endpoint
     */
    playlistByID(playlistId: string, options: PlaylistByIDRequestParams): Promise<PlaylistByIDResponseData>;
    /**
     * Returns data of the current shop
     * @param options Options for this endpoint
     */
    shop(options: ShopRequestParams): Promise<ShopResponseData>;
    /**
     * Returns stats of the requested player account
     * Note: trios stats will always be null
     * @param options Options for this endpoint
     */
    brStats(options: BRStatsRequestParams): Promise<BRStatsResponseData>;
    /**
     * Returns stats of the requested player account
     * Note: trios stats will always be null
     * @param options Options for this endpoint
     */
    brStatsByAccountID(accountId: string, options: BRStatsByAccountIDRequestParams): Promise<BRStatsByAccountIDResponseData>;
}
export default Client;
