"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const HTTP_1 = tslib_1.__importDefault(require("../http/HTTP"));
const enums_1 = require("../../resources/enums");
class Client {
    constructor(config) {
        this.config = {
            language: enums_1.Language.English,
            rateLimitExtraTimeout: 0,
            ...config,
        };
        this.http = new HTTP_1.default(this);
    }
    /**
     * Returns the current aes key
     * @param options Options for this endpoint
     */
    async aesKeys(options) {
        return this.http.fetch('/v2/aes', options);
    }
    /**
     * Returns an array of all banners
     * @param options Options for this endpoint
     */
    async banners(options) {
        return this.http.fetch('/v1/banners', options);
    }
    /**
     * Returns an array of all banner colors
     * @param options Options for this endpoint
     */
    async bannerColors(options) {
        return this.http.fetch('/v1/banners/colors', options);
    }
    /**
     * Returns data of all cosmetics
     * @param options Options for this endpoint
     */
    async allCosmetics(options) {
        return this.http.fetch('/v2/cosmetics', options);
    }
    /**
     * Returns data of the latest added cosmetics
     * @param options Options for this endpoint
     */
    async newCosmetics(options) {
        return this.http.fetch('/v2/cosmetics/new', options);
    }
    /**
     * Returns data of all battle royale cosmetics
     * @param options Options for this endpoint
     */
    async brCosmeticsList(options) {
        return this.http.fetch('/v2/cosmetics/br', options);
    }
    /**
     * Returns data of all track cosmetics
     * @param options Options for this endpoint
     */
    async trackCosmeticsList(options) {
        return this.http.fetch('/v2/cosmetics/tracks', options);
    }
    /**
     * Returns data of all instrument cosmetics
     * @param options Options for this endpoint
     */
    async instrumentCosmeticsList(options) {
        return this.http.fetch('/v2/cosmetics/instruments', options);
    }
    /**
     * Returns data of all car cosmetics
     * @param options Options for this endpoint
     */
    async carCosmeticsList(options) {
        return this.http.fetch('/v2/cosmetics/cars', options);
    }
    /**
     * Returns data of all lego cosmetics
     * @param options Options for this endpoint
     */
    async legoCosmeticsList(options) {
        return this.http.fetch('/v2/cosmetics/lego', options);
    }
    /**
     * Returns data of all lego kit cosmetics
     * @param options Options for this endpoint
     */
    async legoKitCosmeticsList(options) {
        return this.http.fetch('/v2/cosmetics/lego/kits', options);
    }
    /**
     * Returns data of all bean aka fall guys cosmetics
     * @param options Options for this endpoint
     */
    async beanCosmeticsList(options) {
        return this.http.fetch('/v2/cosmetics/beans', options);
    }
    /**
     * Returns data of the requested battle royale cosmetic-id
     * @param options Options for this endpoint
     */
    async brCosmeticByID(cosmeticId, options) {
        return this.http.fetch(`/v2/cosmetics/br/${cosmeticId}`, options);
    }
    /**
     * Returns data of the first battle royale cosmetic which matches the search parameter(s)
     * @param options Options for this endpoint
     */
    async brCosmeticSearch(options) {
        return this.http.fetch('/v2/cosmetics/br/search', options);
    }
    /**
     * Returns an array of all battle royale cosmetics which match the search parameter(s)
     * @param options Options for this endpoint
     */
    async brCosmeticsSearch(options) {
        return this.http.fetch('/v2/cosmetics/br/search/all', options);
    }
    /**
     * Returns an array of the requested battle royale cosmetic ids
     * @param options Options for this endpoint
     */
    async brCosmeticsSearchByIDs(options) {
        return this.http.fetch('/v2/cosmetics/br/search/ids', options);
    }
    /**
     * Returns data of a creator code by its name
     * @param options Options for this endpoint
     */
    async creatorCode(options) {
        return this.http.fetch('/v2/creatorcode', options);
    }
    /**
     * Returns data & images of the BR map & POIs
     * @param options Options for this endpoint
     */
    async brMap(options) {
        return this.http.fetch('/v1/map', options);
    }
    /**
     * Returns data of the current battle royale, save the world & creative news
     * @param options Options for this endpoint
     */
    async news(options) {
        return this.http.fetch('/v2/news', options);
    }
    /**
     * Returns data of the current battle royale news
     * @param options Options for this endpoint
     */
    async brNews(options) {
        return this.http.fetch('/v2/news/br', options);
    }
    /**
     * Returns data of the current save the world news
     * @param options Options for this endpoint
     */
    async stwNews(options) {
        return this.http.fetch('/v2/news/stw', options);
    }
    /**
     * Returns data of the current creative news
     * @param options Options for this endpoint
     */
    async creativeNews(options) {
        return this.http.fetch('/v2/news/creative', options);
    }
    /**
     * Returns an array of all playlists
     * @param options Options for this endpoint
     */
    async playlists(options) {
        return this.http.fetch('/v1/playlists', options);
    }
    /**
     * Returns data of the requested playlist-id
     * @param options Options for this endpoint
     */
    async playlistByID(playlistId, options) {
        return this.http.fetch(`/v1/playlists/${playlistId}`, options);
    }
    /**
     * Returns data of the current shop
     * @param options Options for this endpoint
     */
    async shop(options) {
        return this.http.fetch('/v2/shop', options);
    }
    /**
     * Returns stats of the requested player account
     * Note: trios stats will always be null
     * @param options Options for this endpoint
     */
    async brStats(options) {
        return this.http.fetchStats('/v2/stats/br/v2', options);
    }
    /**
     * Returns stats of the requested player account
     * Note: trios stats will always be null
     * @param options Options for this endpoint
     */
    async brStatsByAccountID(accountId, options) {
        return this.http.fetchStats(`/v2/stats/br/v2/${accountId}`, options);
    }
}
exports.default = Client;
//# sourceMappingURL=Client.js.map