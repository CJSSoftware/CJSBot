const { EmbedBuilder } = require('discord.js');
const fetch = require('node-fetch');
const { Translate } = require('../../process_tools');


module.exports = {
    name: 'fortnite',
    description: 'Fetch and display Fortnite shop data.',
    showHelp: true,

    async execute({ client, inter }) {
        // Fetch Fortnite data from the API
        const FORTNITE_API_KEY = process.env.FORTNITE_API_KEY;  // Make sure this is set in your .env file

        try {
            const response = await fetch('https://api.fortnite-api.com/v2/shop/br', {
                headers: {
                    Authorization: `Bearer ${FORTNITE_API_KEY}`,
                },
            });

            const data = await response.json();

            if (!data || !data.data || !data.data.featured) {
                return inter.reply({
                    content: await Translate('Failed to retrieve Fortnite data. Please try again later.'),
                    ephemeral: true,
                });
            }

            const shopItems = data.data.featured.items.map(item => item.name).join(', ') || 'No items available';

            // Build the embed message
            const embed = new EmbedBuilder()
                .setColor('#ff9900')
                .setTitle('Fortnite Shop')
                .setDescription('Here are the current items available in the Fortnite shop:')
                .addFields([
                    { name: 'Shop Items', value: shopItems, inline: false },
                ])
                .setTimestamp()
                .setFooter({
                    text: await Translate('Data fetched from Fortnite API'),
                    iconURL: client.user.displayAvatarURL({ dynamic: true }),
                });

            // Send the embed to the channel
            return inter.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Error fetching Fortnite data:', error);
            return inter.reply({
                content: await Translate('There was an error fetching Fortnite data. Please try again later.'),
                ephemeral: true,
            });
        }
    },
};